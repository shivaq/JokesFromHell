// Top-level build file where you can add configuration options common to all sub-projects/modules.
// plugin to update dependencies
apply plugin: 'com.github.ben-manes.versions'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        // jacoco
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }

    // Define versions in a single place
    ext {
        // App dependencies
        // android support libraries
        supportLibraryVersion = '25.2.0'
        // butterknife
        butterKnifeVersion = '8.5.1'
        // logger
        timberVersion = '4.5.1'
        // dependency injection
        dagger2Version = '2.10-rc4'
        // unit test
        junitVersion = '4.12'
        assertJ = '3.6.2'
        mockitoVersion = '2.7.1'
        // ui test
        espressoVersion = '2.2.2'
        dexmakerVersion = '1.2'
        squareAssertJ = '1.1.1'
        // google play services
        googlePlayServicesVersion = '10.2.0'
    }
}

def unitDevFreeTest = ":app:testDevFreeDebugUnitTest"
def unitDevPaidTest = ":app:testDevPaidDebugUnitTest"

def uiDevFreeTest = ":app:connectedDevFreeDebugAndroidTest"
def uiDevPaidTest = ":app:connectedDevPaidDebugAndroidTest"

def cleanFiles = ":app:clean"
def runAppEngine = ":backend:appengineRun"
def stopAppEngine = ":backend:appengineStop"

task testWithAppEngine {
    dependsOn = [runAppEngine, unitDevFreeTest,
                 unitDevPaidTest, uiDevFreeTest, uiDevPaidTest]

    //run app engine in daemon mode
    evaluationDependsOn ":backend"
    project(":backend") {
        appengine {
            daemon true
        }
    }
    tasks.getByPath(unitDevFreeTest).mustRunAfter tasks.getByPath(runAppEngine)
    tasks.getByPath(unitDevPaidTest).mustRunAfter tasks.getByPath(unitDevFreeTest)
    tasks.getByPath(uiDevFreeTest).mustRunAfter tasks.getByPath(unitDevPaidTest)
    tasks.getByPath(uiDevPaidTest).mustRunAfter tasks.getByPath(uiDevFreeTest)

    doLast {
        println "test finished!"
    }
    finalizedBy tasks.getByPath(stopAppEngine)
}